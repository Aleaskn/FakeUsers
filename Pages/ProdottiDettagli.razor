@page "/products/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Dettagli Prodotto</h3>

@if (product == null && errorMessage == null)
{
    <p>Caricamento in corso...</p>
}
else if (errorMessage != null)
{
    <div class="error-box">
    <p class="text-danger">@errorMessage</p>
    <button class="btn btn-primary" @onclick="NavigateToHome">Torna alla home</button>
    </div>
}
else
{
    <p><strong>Titolo:</strong> @product.Title</p>
    <p><strong>Prezzo:</strong> @product.Price</p>
    <p><strong>Descrizione:</strong> @product.Description</p>

    <h4>Categoria</h4>
    <p><strong>Nome:</strong> @product.Category.Name</p>
    <p><strong>Immagine:</strong> <img src="@product.Category.Image" alt="@product.Category.Name" /></p>

    <h4>Immagini</h4>
    @foreach (var image in product.Images)
    {
       <img src="@image" alt="Immagine del prodotto" style="width: 100px; height: auto; margin-right: 5px;" />
}
    <button class="btn btn-primary" @onclick="NavigateToHome">Torna alla home</button>
}

    @*bottone per la DELETE dell'oggetto*@
    <h3>Elimina Prodotto</h3>

    <button class="btn btn-danger" @onclick="DeleteProduct">Elimina Prodotto</button>

    @*bottone per la *@


@code {
    private Product? product = null;
    private string? errorMessage = null;

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Recupera i dettagli dell'utente dall'API
            product = await Http.GetFromJsonAsync<Product>($"https://api.escuelajs.co/api/v1/products/{id}");

            if (product == null)
            {
                errorMessage = "Prodotto non trovato.";
            }
        }
        catch (Exception ex)
        {
            // Gestione degli errori
            errorMessage = "Si è verificato un errore durante il caricamento dei dettagli del prodotto: " + ex.Message;
        }
    }

    // Elimina prodotto tramite id
        private async Task DeleteProduct()
    {
        try
        {
            // Esegui la DELETE per eliminare il prodotto
            var response = await Http.DeleteAsync($"https://api.escuelajs.co/api/v1/products/{id}"); // Http.DeleteAsync invia una richiesta di DELETE all'API e la richiesta viene inviata all'URL corrispondente al prodotto identificato dall'id presente nel percorso.

            if (response.IsSuccessStatusCode)
            {
                // Naviga alla pagina della lista dei prodotti dopo l'eliminazione
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                errorMessage = "Errore durante l'eliminazione del prodotto.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Si è verificato un errore durante l'eliminazione del prodotto: " + ex.Message;
        }
    }

    private void NavigateToHome()
    {
        // Naviga verso la homepage
        NavigationManager.NavigateTo("/");
    }

        public class Product
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public int Price { get; set; }
        public string Description { get; set; } = string.Empty;
        public Category Category { get; set; } = new Category();
        public string[] Images { get; set; } = Array.Empty<string>(); 
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Image { get; set; } = string.Empty;
    }

  
}
