@page "/products"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Lista di prodotti da Platzi Fake Store API</h1>

@if (errorMessage != null)
{
    <div class="error-box">
        <p>@errorMessage</p>
        <button class="btn btn-primary" @onclick="NavigateToHome">Torna alla Home</button>
    </div>
}
else if (products != null)
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                <a href="@($"/products/{product.Id}")">@product.Title</a>
            </li>
        }
    </ul>
}
else
{
    <p>No product found.</p>
}

<h1>Aggiungi Nuovo Prodotto</h1>

<form @onsubmit="AddProduct" @onsubmit:preventDefault> @*per prevenire il refresh della pagina*@
    <div class="form-group">
        <label for="title">Titolo:</label>
        <input type="text" value="@newProduct.Title" class="form-control" @onchange="UpdateTitle" required/>
    </div>

    <div class="form-group">
        <label for="price">Prezzo:</label>
        <input type="number" value="@newProduct.Price" class="form-control" @onchange="UpdatePrice" required/>
    </div>

    <div class="form-group">
        <label for="description">Descrizione:</label>
        <input type="text" value="@newProduct.Description" class="form-control" @onchange="UpdateDescription" required/>
    </div>

    <div class="form-group">
        <label for="categoryId">Categoria ID:</label>
        <input name="category" type="number" value="@newProduct.CategoryId" class="form-control" @onchange="UpdateCategoryId" required/>
    </div>

    <div class="form-group">
        <label for="images">Immagine:</label>
        <input type="text" value="@newProduct.Images[0]" class="form-control" @onchange="UpdateImage" required/>
    </div> @*L'input per l'immagine ora legge direttamente il valore inserito dall'utente e lo aggiorna nel modello newProduct.Images*@

    <button class="btn btn-success" type="submit">Aggiungi Prodotto</button>
</form>

@code {
    private List<Products>? products;
    private string? errorMessage;

    private NewProduct newProduct = new NewProduct
    {
        Title = string.Empty,
        Price = 0,
        Description = string.Empty,
        CategoryId = 1,
        Images = new List<string> { string.Empty }
    };

    private void UpdateTitle(ChangeEventArgs e)
    {
        newProduct.Title = e.Value.ToString();
    }

    private void UpdateDescription(ChangeEventArgs e)
    {
        newProduct.Description = e.Value.ToString();
    }

    private void UpdatePrice(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int result))
            newProduct.Price = result;
        else
            newProduct.Price = 0; 
    }

    private void UpdateCategoryId(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int result))
            newProduct.CategoryId = result;
        else
            newProduct.CategoryId = 1; 
    }

    private void UpdateImage(ChangeEventArgs e) // La funzione verifica se l'URL dell'immagine è valido utilizzando Uri.IsWellFormedUriString() e aggiorna l'array Images solo se è valido.
    {
        var imageUrl = e.Value.ToString();
        if (Uri.IsWellFormedUriString(imageUrl, UriKind.Absolute))
        {
            newProduct.Images[0] = imageUrl; // Aggiorna solo se l'URL è valido
        } // L'input per l'immagine ora legge direttamente il valore inserito dall'utente e lo aggiorna nel modello newProduct.Images
        else
        {
            errorMessage = "L'URL dell'immagine non è valido."; // Mostra un messaggio di errore se non è valido
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Products>>("https://api.escuelajs.co/api/v1/products");
        }
        catch (Exception ex)
        {
            errorMessage = "Si è verificato un errore durante il caricamento della lista dei prodotti: " + ex.Message;
        }
    }

    private async Task AddProduct()
    {
        try
        {
            // 
            if (newProduct.Images.Any(image => !Uri.IsWellFormedUriString(image, UriKind.Absolute)))
            {
                errorMessage = "Uno o più URL dell'immagine non sono validi.";
                return; 
            }

            var response = await Http.PostAsJsonAsync("https://api.escuelajs.co/api/v1/products", newProduct);

            if (response.IsSuccessStatusCode)
            {
                products = await Http.GetFromJsonAsync<List<Products>>("https://api.escuelajs.co/api/v1/products");
                Console.WriteLine("Prodotto aggiunto con successo!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Errore durante l'invio del prodotto: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore durante la POST: {ex.Message}";
        }
    }

    // metodo per bottone per tornare alla home
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public class NewProduct
    {
        public string Title { get; set; }
        public int Price { get; set; }
        public string Description { get; set; }
        public int CategoryId { get; set; }
        public List<string> Images { get; set; }
    }

    public class Products
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
    }
}
